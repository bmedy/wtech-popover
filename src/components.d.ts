/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface WtechBackdrop {
    /**
    * If `true`, the backdrop will stop propagation on tap.
    */
    'stopPropagation': boolean;
    /**
    * If `true`, the backdrop will can be clicked and will emit the `wtechBackdropTap` event.
    */
    'tappable': boolean;
    /**
    * If `true`, the backdrop will be visible.
    */
    'visible': boolean;
  }
  interface WtechBackdropAttributes extends StencilHTMLAttributes {
    /**
    * Emitted when the backdrop is tapped.
    */
    'onWtechBackdropTap'?: (event: CustomEvent<void>) => void;
    /**
    * If `true`, the backdrop will stop propagation on tap.
    */
    'stopPropagation'?: boolean;
    /**
    * If `true`, the backdrop will can be clicked and will emit the `wtechBackdropTap` event.
    */
    'tappable'?: boolean;
    /**
    * If `true`, the backdrop will be visible.
    */
    'visible'?: boolean;
  }

  interface WtechPopover {
    /**
    * If `true`, the popover will animate.
    */
    'animated': boolean;
    /**
    * If `true`, the popover will be dismissed when the backdrop is clicked.
    */
    'backdropDismiss': boolean;
    'dismiss': () => void;
    'present': () => void;
    /**
    * If `true`, a backdrop will be displayed behind the popover.
    */
    'showBackdrop': boolean;
  }
  interface WtechPopoverAttributes extends StencilHTMLAttributes {
    /**
    * If `true`, the popover will animate.
    */
    'animated'?: boolean;
    /**
    * If `true`, the popover will be dismissed when the backdrop is clicked.
    */
    'backdropDismiss'?: boolean;
    /**
    * Emitted after the popover has dismissed.
    */
    'onWtechPopoverDidDismiss'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted after the popover has presented.
    */
    'onWtechPopoverDidPresent'?: (event: CustomEvent<void>) => void;
    /**
    * If `true`, a backdrop will be displayed behind the popover.
    */
    'showBackdrop'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'WtechBackdrop': Components.WtechBackdrop;
    'WtechPopover': Components.WtechPopover;
  }

  interface StencilIntrinsicElements {
    'wtech-backdrop': Components.WtechBackdropAttributes;
    'wtech-popover': Components.WtechPopoverAttributes;
  }


  interface HTMLWtechBackdropElement extends Components.WtechBackdrop, HTMLStencilElement {}
  var HTMLWtechBackdropElement: {
    prototype: HTMLWtechBackdropElement;
    new (): HTMLWtechBackdropElement;
  };

  interface HTMLWtechPopoverElement extends Components.WtechPopover, HTMLStencilElement {}
  var HTMLWtechPopoverElement: {
    prototype: HTMLWtechPopoverElement;
    new (): HTMLWtechPopoverElement;
  };

  interface HTMLElementTagNameMap {
    'wtech-backdrop': HTMLWtechBackdropElement
    'wtech-popover': HTMLWtechPopoverElement
  }

  interface ElementTagNameMap {
    'wtech-backdrop': HTMLWtechBackdropElement;
    'wtech-popover': HTMLWtechPopoverElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
